- hosts: all:!localhost
  gather_facts: false
  strategy: free

  tasks:
    - name: Starting block to make sure endpoint reboot at the end of play
      block:
        - name: Find the OS version
          setup:
            gather_subset: min

        - name: checking C drive space
          win_shell: |-
            $c=(Get-WMIObject Win32_LogicalDisk | ?{$_.DriveType -eq 3 -and $_.Name -eq 'C:'} | Select-Object @{n='FreeSpace';e={"{0:n2}" -f ($_.freespace/1gb)}}).FreeSpace | ConvertTo-JSON
            $c
          register: freespace
          changed_when: false
      
        - name: failing execution if c drive is less than 4GB
          set_fact:
            cspace: "{{ freespace.stdout | from_json }}"
          failed_when: cspace|int <= 4
          changed_when: false

        - name: Create directory structure
          win_file:
            path: C:\Temp\ansible_win_patching
            state: directory
    
        - name: Create patching log file
          win_file:
            path: C:\Temp\ansible_win_patching\ansible_patching.txt
            state: touch

        - name: Reboot before installation
          win_reboot:
            pre_reboot_delay: 10
            reboot_timeout: 300
            post_reboot_delay: 10

        - name: Last Search and Installation Date
          win_shell: (New-Object -ComObject Microsoft.Update.AutoUpdate).Results() | fl;
          register: lsdt
          changed_when: false

        - name: Search for Updates
          win_shell: >-
            (New-Object -ComObject Microsoft.Update.AutoUpdate).DetectNow();
            $ses=New-Object -ComObject 'Microsoft.Update.Session';
            $srch = $ses.CreateUpdateSearcher();$result=$srch.Search("IsInstalled=0");
            $result.Updates() | Select Title,IsDownloaded,IsHidden,IsInstalled,IsMandatory;
          register: srch
          changed_when: false

        - name: Download Updates if Not Downloaded
          win_shell: >-
            $ses=New-Object -ComObject 'Microsoft.Update.Session';
            $srch=$ses.CreateUpdateSearcher();$result=$srch.Search("IsInstalled=0");
            $dld=New-Object -ComObject 'Microsoft.Update.UpdateColl';
            foreach($pf in $result.Updates){if(!($pf.IsDownloaded)){$dld.Add($pf) | Out-Null}};
            $dldr=$ses.CreateUpdateDownloader();$dldr.Updates = $dld;$c=$dld.count; 
            if($c -ne 0){$dldop=$dldr.Download();};
            $dldr.Updates() | Select Title,IsDownloaded,IsHidden,IsInstalled,IsMandatory;$dldop;
          register: dldr
          become: yes
          become_method: runas
          become_user: SYSTEM

        - name: Start Time
          win_shell: get-date -UFormat "%Y/%m/%d %H:%M:%S" | ConvertTo-JSON
          register: sdt
          changed_when: false

        - name: Install Updates if Downloaded
          win_shell: >-
            $ses=New-Object -ComObject 'Microsoft.Update.Session';
            $srch=$ses.CreateUpdateSearcher();$result=$srch.Search("IsInstalled=0");
            $dld=New-Object -ComObject 'Microsoft.Update.UpdateColl';
            foreach($pf in $result.Updates){if(!($pf.IsDownloaded)){$dld.Add($pf) | Out-Null}};
            $dldr=$ses.CreateUpdateDownloader();$dldr.Updates = $dld;$c=$dld.count; 
            if($c -ne 0){$dldop=$dldr.Download();};$dldop;
            $ui = New-Object -ComObject 'Microsoft.Update.UpdateColl';
            foreach($cu in $result.Updates){if($cu.IsDownloaded){$ui.Add($cu) | Out-Null;};};
            $instlr = $ses.CreateUpdateInstaller();$instlr.Updates = $ui;
            $ic=$ui.count;if($ic -ne 0){$ir = $ui.Install();}; 
            $instlr.Updates() | Select Title,IsDownloaded,IsHidden,IsInstalled,IsMandatory;$ir;
          register: instl
          become: yes
          become_method: runas
          become_user: SYSTEM

#        - name: Installing Windows Patches
#          win_updates:
#            category_names:
#            - CriticalUpdates
#            - DefinitionUpdates
#            - SecurityUpdates
#            - Updates
#            - UpdateRollups
#            - ServicePacks
#            - FeaturePacks
#            server_selection: windows_update 
#            state: installed
#            reboot: no
#            log_path: C:\Temp\ansible_win_patching\ansible_patching.txt
#          register: wsusupdates
#          async: 180
#          poll: 30
#          become: yes
#          become_method: runas
#          become_user: SYSTEM

        - name: End Time
          win_shell: $tt=(get-date) - [datetime]"{{ sdt.stdout | from_json }}"; Write-Host $tt.TotalHours "hours on {{ inventory_hostname }}";
          register: tt
          changed_when: false

        - name: Reboot after installation
          win_reboot:
            pre_reboot_delay: 120
            reboot_timeout: 900
            post_reboot_delay: 120

      rescue:
        - name: failed
          include_role:
            name: returncode
          vars:
            rc_support: undetermined
            rc_group: unsupported_platform
            rc_number: 102
            rc_message: "{{ inventory_hostname }} : Error {{ instl }}"
